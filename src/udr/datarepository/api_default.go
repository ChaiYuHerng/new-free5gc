/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datarepository

import (
	"free5gc/lib/http_wrapper"
	"free5gc/lib/openapi"
	"free5gc/lib/openapi/models"
	"free5gc/src/udr/logger"
	"free5gc/src/udr/producer"
	"net/http"

	"github.com/gin-gonic/gin"
)

// HTTPApplicationDataInfluenceDataGet -
func HTTPApplicationDataInfluenceDataGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataInfluenceIdDelete -
func HTTPApplicationDataInfluenceDataInfluenceIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataInfluenceIdPatch -
func HTTPApplicationDataInfluenceDataInfluenceIdPatch(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataInfluenceIdPut -
func HTTPApplicationDataInfluenceDataInfluenceIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifyGet -
func HTTPApplicationDataInfluenceDataSubsToNotifyGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifyPost -
func HTTPApplicationDataInfluenceDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdGet(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut -
func HTTPApplicationDataInfluenceDataSubsToNotifySubscriptionIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPApplicationDataPfdsAppIdDelete -
func HTTPApplicationDataPfdsAppIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["appId"] = c.Params.ByName("appId")

	rsp := producer.HandleApplicationDataPfdsAppIdDelete(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataPfdsAppIdGet -
func HTTPApplicationDataPfdsAppIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["appId"] = c.Params.ByName("appId")

	rsp := producer.HandleApplicationDataPfdsAppIdGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataPfdsAppIdPut -
func HTTPApplicationDataPfdsAppIdPut(c *gin.Context) {
	var pfdDataforApp models.PfdDataForApp

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&pfdDataforApp, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, pfdDataforApp)
	req.Params["appId"] = c.Params.ByName("appId")

	rsp := producer.HandleApplicationDataPfdsAppIdPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPApplicationDataPfdsGet -
func HTTPApplicationDataPfdsGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)

	rsp := producer.HandleApplicationDataPfdsGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPExposureDataSubsToNotifyPost -
func HTTPExposureDataSubsToNotifyPost(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdDelete - Deletes a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdDelete(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPExposureDataSubsToNotifySubIdPut - updates a subcription for notifications
func HTTPExposureDataSubsToNotifySubIdPut(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// HTTPPolicyDataBdtDataBdtReferenceIdDelete -
func HTTPPolicyDataBdtDataBdtReferenceIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdDelete(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataBdtDataBdtReferenceIdGet -
func HTTPPolicyDataBdtDataBdtReferenceIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataBdtDataBdtReferenceIdPut -
func HTTPPolicyDataBdtDataBdtReferenceIdPut(c *gin.Context) {
	var bdtData models.BdtData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&bdtData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, bdtData)
	req.Params["bdtReferenceId"] = c.Params.ByName("bdtReferenceId")

	rsp := producer.HandlePolicyDataBdtDataBdtReferenceIdPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataBdtDataGet -
func HTTPPolicyDataBdtDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)

	rsp := producer.HandlePolicyDataBdtDataGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataPlmnsPlmnIdUePolicySetGet -
func HTTPPolicyDataPlmnsPlmnIdUePolicySetGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["plmnId"] = c.Params.ByName("plmnId")

	rsp := producer.HandlePolicyDataPlmnsPlmnIdUePolicySetGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataSponsorConnectivityDataSponsorIdGet -
func HTTPPolicyDataSponsorConnectivityDataSponsorIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["sponsorId"] = c.Params.ByName("sponsorId")

	rsp := producer.HandlePolicyDataSponsorConnectivityDataSponsorIdGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataSubsToNotifyPost -
func HTTPPolicyDataSubsToNotifyPost(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&policyDataSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataSubsToNotifyPost(req)

	for key, val := range rsp.Header {
		c.Header(key, val[0])
	}

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataSubsToNotifySubsIdDelete -
func HTTPPolicyDataSubsToNotifySubsIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdDelete(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataSubsToNotifySubsIdPut -
func HTTPPolicyDataSubsToNotifySubsIdPut(c *gin.Context) {
	var policyDataSubscription models.PolicyDataSubscription

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&policyDataSubscription, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, policyDataSubscription)
	req.Params["subsId"] = c.Params.ByName("subsId")

	rsp := producer.HandlePolicyDataSubsToNotifySubsIdPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdAmDataGet -
func HTTPPolicyDataUesUeIdAmDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdAmDataGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataGet -
func HTTPPolicyDataUesUeIdOperatorSpecificDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPatch - Need to be fixed
func HTTPPolicyDataUesUeIdOperatorSpecificDataPatch(c *gin.Context) {
	var patchItemArray []models.PatchItem

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&patchItemArray, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, patchItemArray)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataPatch(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdOperatorSpecificDataPut -
func HTTPPolicyDataUesUeIdOperatorSpecificDataPut(c *gin.Context) {
	var operatorSpecificDataContainerMap map[string]models.OperatorSpecificDataContainer

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&operatorSpecificDataContainerMap, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, operatorSpecificDataContainerMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdOperatorSpecificDataPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdSmDataGet -
func HTTPPolicyDataUesUeIdSmDataGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdSmDataPatch - Need to be fixed
func HTTPPolicyDataUesUeIdSmDataPatch(c *gin.Context) {
	var usageMonDataMap map[string]models.UsageMonData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&usageMonDataMap, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, usageMonDataMap)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataPatch(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdDelete(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdDelete(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdGet -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdSmDataUsageMonIdPut -
func HTTPPolicyDataUesUeIdSmDataUsageMonIdPut(c *gin.Context) {
	var usageMonData models.UsageMonData

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&usageMonData, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, usageMonData)
	req.Params["ueId"] = c.Params.ByName("ueId")
	req.Params["usageMonId"] = c.Params.ByName("usageMonId")

	rsp := producer.HandlePolicyDataUesUeIdSmDataUsageMonIdPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdUePolicySetGet -
func HTTPPolicyDataUesUeIdUePolicySetGet(c *gin.Context) {
	req := http_wrapper.NewRequest(c.Request, nil)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetGet(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdUePolicySetPatch -
func HTTPPolicyDataUesUeIdUePolicySetPatch(c *gin.Context) {
	var uePolicySet models.UePolicySet

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&uePolicySet, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetPatch(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}

// HTTPPolicyDataUesUeIdUePolicySetPut -
func HTTPPolicyDataUesUeIdUePolicySetPut(c *gin.Context) {
	var uePolicySet models.UePolicySet

	requestBody, err := c.GetRawData()
	if err != nil {
		problemDetail := models.ProblemDetails{
			Title:  "System failure",
			Status: http.StatusInternalServerError,
			Detail: err.Error(),
			Cause:  "SYSTEM_FAILURE",
		}
		logger.DataRepoLog.Errorf("Get Request Body error: %+v", err)
		c.JSON(http.StatusInternalServerError, problemDetail)
		return
	}

	err = openapi.Deserialize(&uePolicySet, requestBody, "application/json")
	if err != nil {
		problemDetail := "[Request Body] " + err.Error()
		rsp := models.ProblemDetails{
			Title:  "Malformed request syntax",
			Status: http.StatusBadRequest,
			Detail: problemDetail,
		}
		logger.DataRepoLog.Errorln(problemDetail)
		c.JSON(http.StatusBadRequest, rsp)
		return
	}

	req := http_wrapper.NewRequest(c.Request, uePolicySet)
	req.Params["ueId"] = c.Params.ByName("ueId")

	rsp := producer.HandlePolicyDataUesUeIdUePolicySetPut(req)

	responseBody, err := openapi.Serialize(rsp.Body, "application/json")
	if err != nil {
		logger.DataRepoLog.Errorln(err)
		problemDetails := models.ProblemDetails{
			Status: http.StatusInternalServerError,
			Cause:  "SYSTEM_FAILURE",
			Detail: err.Error(),
		}
		c.JSON(http.StatusInternalServerError, problemDetails)
	} else {
		c.Data(rsp.Status, "application/json", responseBody)
	}
}
